// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Follow {
  followedId String
  followerId String

  followed User @relation(name: "followers", fields: [followedId], references: [id], onDelete: Cascade)
  follower User @relation(name: "following", fields: [followerId], references: [id], onDelete: Cascade)

  @@unique([followedId, followerId])
  @@index([followedId])
  @@index([followerId])
}

model Like {
  tweetId String
  userId  String

  tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tweetId, userId])
  @@index([tweetId])
  @@index([userId])
}

model Tweet {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  creatorId   String
  content     String
  parentId    String?
  retweetedId String?

  creator   User    @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  likes     Like[]
  parent    Tweet?  @relation(name: "replies", fields: [parentId], references: id, onDelete: NoAction, onUpdate: NoAction)
  replies   Tweet[] @relation(name: "replies")
  retweeted Tweet?  @relation(name: "retweets", fields: [retweetedId], references: id, onDelete: NoAction, onUpdate: NoAction)
  retweets  Tweet[] @relation(name: "retweets")

  @@unique([createdAt, id])
  @@index([creatorId])
  @@index([parentId])
  @@index([retweetedId])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  // Not NextAuth related
  username String?

  followers Follow[] @relation(name: "followers")
  following Follow[] @relation(name: "following")
  likes     Like[]
  tweets    Tweet[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
